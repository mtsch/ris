#!/usr/bin/env python
import roslib
roslib.load_manifest('facedetector')
import rospy
import sys, select, termios, tty
from std_msgs.msg import String, Bool, ColorRGBA
import sensor_msgs.msg
import message_filters
from facedetector.msg import Detection
from localizer.srv import Localize
from sensor_msgs.msg import CameraInfo
from visualization_msgs.msg import Marker, MarkerArray
from image_geometry import PinholeCameraModel
from geometry_msgs.msg import Point, Vector3
import math

# Node for face detection.
class FaceMapper():
	def checkForFaceLocation(self, currentPoint):
		sosedje = 3		# number of existing markers needed for valid location
		distance = 0.3	# maarkers under this distance are counted for current location
		overlapCount = 0
		for marker in self.timed_markers.markers:
			if (math.sqrt((currentPoint.x - marker.pose.position.x)**2 + (currentPoint.y - marker.pose.position.y)**2) < distance):
				overlapCount += 1
			#print "x_new "+str(currentPoint.x)+"y_new "+str(currentPoint.y)+"x_old "+str(marker.pose.position.x)+"y_old"+str(marker.pose.position.y)+"; dist " + str(math.sqrt((currentPoint.x - marker.pose.position.x)**2 + (currentPoint.y - marker.pose.position.y)**2))
		return overlapCount >= sosedje

	def faces_callback(self, faces, camera):
#		listener = tf.TransformListener()

		camera_model = PinholeCameraModel()
		camera_model.fromCameraInfo(camera)

		n = len(faces.x)
		new_final_location = False

		markers = MarkerArray()

		for i in xrange(0, n):
			u = faces.x[i] + faces.width[i] / 2
			v = faces.y[i] + faces.height[i] / 2
			#print u, v
			point = Point(((u - camera_model.cx()) - camera_model.Tx()) / camera_model.fx(),
		         ((v - camera_model.cy()) - camera_model.Ty()) / camera_model.fy(), 1)
			#print point
			resp = self.localize(faces.header, point, 3)
			if resp:
				marker = Marker()
				marker.header.stamp = faces.header.stamp
				marker.header.frame_id = faces.header.frame_id
				marker.pose = resp.pose
				marker.type = Marker.CUBE
				marker.action = Marker.ADD
				marker.frame_locked = False
				marker.lifetime = rospy.Time(0)
				marker.id = self.message_counter + i
				marker.scale = Vector3(0.1, 0.1, 0.1)
				marker.color = ColorRGBA(1, 0, 0, 1)
				markers.markers.append(marker)		# ima samo trenutne obraze

				marker2 = Marker()
				marker2.header.stamp = faces.header.stamp
				marker2.header.frame_id = faces.header.frame_id
				marker2.pose = resp.pose
				marker2.type = Marker.CUBE
				marker2.action = Marker.ADD
				marker2.frame_locked = False
				marker2.lifetime = rospy.Time(80.0)
				marker2.id = self.message_counter + i
				marker2.scale = Vector3(0.1, 0.1, 0.1)
				marker2.color = ColorRGBA(0, 1, 0, 1)
				self.timed_markers.markers.append(marker2)	# vse detekcije obraza v zadnih rospy.Time(8.0)
				print "current id " + str(marker2.id) + "; size " + str(len(self.timed_markers.markers)) + "(" +str(len(self.face_loc_markers.markers))+ ")"
				
				if (self.checkForFaceLocation(resp.pose.position)):
					new_final_location = True
					#marker2.lifetime = rospy.Time(0)
					marker.color = ColorRGBA(0, 0, 1, 1)
					self.face_loc_markers.markers.append(marker)	# dejanska lokacija za robota
					print "Face detected " + str(len(self.face_loc_markers.markers))
		
		self.markers_pub.publish(markers)
		self.temp_markers_pub.publish(self.timed_markers)
		
		if new_final_location:
			self.face_loc_pub.publish(self.face_loc_markers)
		
		self.message_counter = self.message_counter + n
		
#		listener.waitForTransform("/base_link", "/map", rospy.Time.now(), rospy.Duration(1.0))


	def __init__(self):
		region_scope = rospy.get_param('~region', 3)
		markers_topic = rospy.get_param('~markers_topic', rospy.resolve_name('%s/markers' % rospy.get_name()))
		temp_markers_topic = rospy.get_param('~temp_markers_topic', rospy.resolve_name('%s/temp_markers' % rospy.get_name()))
		face_loc_topic = rospy.get_param('~face_loc_topic', rospy.resolve_name('%s/face_loc' % rospy.get_name()))
		faces_topic = rospy.get_param('~faces_topic', '/facedetector/faces')
		camera_topic = rospy.get_param('~camera_topic', '/camera/camera_info')

		rospy.wait_for_service('localizer/localize')

		self.faces_sub = message_filters.Subscriber(faces_topic, Detection)
		self.camera_sub = message_filters.Subscriber(camera_topic, CameraInfo)
		self.joined_sub = message_filters.TimeSynchronizer([self.faces_sub, self.camera_sub], 30)
		self.joined_sub.registerCallback(self.faces_callback)

		self.localize = rospy.ServiceProxy('localizer/localize', Localize)

		self.markers_pub = rospy.Publisher(markers_topic, MarkerArray, queue_size = 300)
		self.temp_markers_pub = rospy.Publisher(temp_markers_topic, MarkerArray, queue_size = 300)
		self.face_loc_pub = rospy.Publisher(face_loc_topic, MarkerArray, queue_size = 300)

		self.timed_markers = MarkerArray()
		self.face_loc_markers = MarkerArray()
		self.message_counter = 0

# Main function.    
if __name__ == '__main__':

        rospy.init_node('facemapper')
        try:
		fd = FaceMapper()
		rospy.spin()	
        except rospy.ROSInterruptException: pass
